
[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_a_mixed_count_of_packages,_no_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_a_mixed_count_of_packages,_some_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_a_mixed_count_of_packages,_some_license_violations#01 - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_a_mixed_count_of_packages_across_ecosystems,_some_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">NuGet</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>

<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">Packagist</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>

<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_a_mixed_count_of_packages_and_groups,_some_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/multiple_sources_with_no_packages - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading"></h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/no_sources - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          

        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_no_packages - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading"></h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package,_no_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package,_no_licenses - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package_and_an_unknown_license - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package_and_multiple_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package_and_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/one_source_with_one_package_and_one_license_violation_(dev) - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithLicenseViolations/two_sources_with_packages,_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/multiple_sources_with_a_mixed_count_of_packages,_some_called_vulnerabilities_and_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (2)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.3</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-3">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('3')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-3-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-5">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('5')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.3</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-5-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-6" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/multiple_sources_with_a_mixed_count_of_packages,_some_vulnerabilities_and_license_violations - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (3)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="3">
          <label for="project-type-checkbox"> Project Vulnerabilities (3)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">3 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-3">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('3')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-3-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-5">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('5')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-5-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-6" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/one_source_with_one_package,_one_called_vulnerability,_and_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/one_source_with_one_package,_one_uncalled_vulnerability,_and_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (1)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.3</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/one_source_with_one_package,_one_vulnerability,_and_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithMixedIssues/two_sources_with_packages,_one_vulnerability,_one_license_violation - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_grouped_packages,_and_multiple_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (6)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="6">
          <label for="project-type-checkbox"> Project Vulnerabilities (6)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">6 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">3</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-3" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-5">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('5')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-5-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-6" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-7">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('7')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine3</td>
    <td >0.4.1</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">2</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-7-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-8" data-vuln-id="OSV-3">
    <td>
      
      OSV-3
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-3')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-9" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_packages,_and_multiple_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (6)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="6">
          <label for="project-type-checkbox"> Project Vulnerabilities (6)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">6 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">3</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-3" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-5">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('5')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-5-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-6" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-7">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('7')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine3</td>
    <td >0.4.1</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">2</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-7-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-8" data-vuln-id="OSV-3">
    <td>
      
      OSV-3
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-3')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-9" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_packages,_no_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_packages,_some_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (3)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="3">
          <label for="project-type-checkbox"> Project Vulnerabilities (3)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">3 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-3">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('3')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-3-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-5">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('5')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-5-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-6" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_packages_across_ecosystems,_and_multiple_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (6)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="6">
          <label for="project-type-checkbox"> Project Vulnerabilities (6)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">6 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">NuGet</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >author3/mine3</td>
    <td >0.4.1</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">2</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-3">
    <td>
      
      OSV-3
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-3')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-3" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-4">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('4')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-4-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-5" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>

<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">Packagist</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-6">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('6')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >author1/mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">2</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-6-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-7" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-8" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-9">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('9')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.2</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-9-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-10" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_a_mixed_count_of_packages_across_ecosystems,_and_multiple_vulnerabilities,_but_some_uncalled - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (4)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="4">
          <label for="project-type-checkbox"> Project Vulnerabilities (4)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (2)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">4 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">NuGet</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >author3/mine3</td>
    <td >0.4.1</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">2</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-3">
    <td>
      
      OSV-3
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-3')">Open in tab</p>
    </td>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-3" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-4">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('4')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine2</td>
    <td >3.2.5</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-4-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-5" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>

<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">Packagist</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-6">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('6')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >author1/mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-6-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-7" data-vuln-id="OSV-5">
    <td>
      
      OSV-5
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-5')">Open in tab</p>
    </td>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-8" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-9">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('9')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.2</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-9-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-10" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/multiple_sources_with_no_packages - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading"></h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/third/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/no_sources - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          

        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_no_packages - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading"></h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package,_no_vulnerabilities - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package,_one_uncalled_vulnerability,_and_one_called_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (1)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-3" data-vuln-id="GHSA-123">
    <td class="uncalled-text">
      
      GHSA-123
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('GHSA-123')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_one_called_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_one_uncalled_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (1)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.3</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      OSV-1
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_one_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_one_vulnerability_(dev) - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_two_aliases_of_a_single_uncalled_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (0)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="0">
          <label for="project-type-checkbox"> Project Vulnerabilities (0)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (1)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">0 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td class="uncalled-text" >mine1</td>
    <td class="uncalled-text" >1.2.3</td>
    <td>
      
      <p class="fixable-tag has-fix">Fix available</p>
      
    </td>
    <td>
      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  

  
  
  <tr class='table-tr vuln-tr uncalled-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td class="uncalled-text">
      
      <div class="tooltip">
        OSV-1
        <span class="tooltiptext">Group IDs: GHSA-123</span>
      </div>
      
    </td>
    <td class="uncalled-text">
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_one_package_and_two_aliases_of_a_single_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      <div class="tooltip">
        OSV-1
        <span class="tooltiptext">Group IDs: GHSA-123</span>
      </div>
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/one_source_with_vulnerabilities,_some_missing_content - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (2)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="2">
          <label for="project-type-checkbox"> Project Vulnerabilities (2)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">2 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-3">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('3')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine3</td>
    <td >0.10.2-rc</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-3-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-2">
    <td>
      
      OSV-2
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-2')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/two_sources_with_packages,_one_vulnerability - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (1)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="1">
          <label for="project-type-checkbox"> Project Vulnerabilities (1)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">1 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---

[TestPrintHTMLResults_WithVulnerabilities/two_sources_with_the_same_vulnerable_package - 1]
<!doctype html>
<html>

<head>
  <title>Vulnerability Scan Report</title>
  <link rel="icon" href="https://google.github.io/osv.dev/assets/icon.png" type="image/x-icon" />
  <link href='https://fonts.googleapis.com/css?family=Overpass' rel='stylesheet'>
  <link rel="stylesheet" href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
  body {
    margin: 0;
    padding: 0;
    background: #292929;
    color: #fff;
    overflow-y: scroll;
    font-family: "Overpass Mono", monospace;
    font-size: 12pt;
    font-weight: 100;
  }

  a {
    color: inherit;
  }

  .container {
    max-width: 1400px;
    margin: 50px auto;
     
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.15);
    min-height: 90vh;
  }

  h2 {
    margin-top: 50px;
    font-size: 15pt;
  }

  h3 {
    font-size: 12pt;
    margin-top: 30px;
  }

  h1,
  h2,
  h3 {
    font-family: "Overpass Mono", monospace;
    font-weight: normal;
  }

  .ecosystem {
    margin-top: 20px;
  }

  .vulnerability {
    padding: 5px;
    border-radius: 3px;
  }

  details summary {
    cursor: pointer;
  }

  details p {
    margin-left: 10px;
  }

  header {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
  }

  .logo {
    height: 20px;
     
     
  }

  header .vl {
    border-left: 2px solid #fff;
    height: 25px;
    margin-left: 20px;
    margin-right: 20px;

  }

  header h1 {
    font-size: 23px;
  }

  .material-icons {
    vertical-align: middle;
  }

  .vuln-table {
    width: 100%;
    text-align: left;
    border-radius: 5px;
    margin-bottom: 40px;
    margin-top: 10px;
    color: rgba(255, 255, 255, 0.87);
    border-spacing: 0;
  }

  .vuln-table th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    padding: 16px;
  }

  .table-tr {
    line-height: 30px;
  }

  .table-tr td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    word-break: break-word;
    width: 200px;
    padding: 16px;
  }

  .table-tr:hover {
    background-color: rgba(255, 255, 255, 0.04);
  }

  .vuln-id {
    color: #d9534f;
  }

  .package-details {
    text-align: left;
    padding: 0 50px;
    display: none;
    padding-top: 20px;
    padding-bottom: 30px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.12);
    max-height: 800px;
    overflow: overlay;
  }

  .table-tr:hover .open-in-tab-tag {
    display: inline
  }

  .open-in-tab-tag {
    display: none;
    border: 1px solid rgba(255, 255, 255, 0.12);
    padding: 5px 5px;
    border-radius: 4px;
    width: fit-content;
  }

  .open-in-tab-cell {
    width: 90px !important;
    cursor: pointer;
  }

  .severity-cell {
    width: 60px !important;
  }

  .fixable-tag {
    border-radius: 4px;
    max-width: 250px;
    width: fit-content;
    padding: 0 5px;
    white-space: nowrap;
    overflow: hidden;
    text-align: center;
  }

  .has-fix {
    background-color: #6A6A6A;
  }

  .no-fix {
    background-color: #252525;
    border: 1px solid #3C4043;
  }

  .uncalled-tr {
    display: none;
  }

  .uncalled-text {
    color: #808080;
  }

  #vuln-tab {
    display: none;
    margin-top: 40px;
  }

  #tab-switch {
    text-align: left;
    border-bottom: 1px solid #6c6c6c;
    padding-left: 20px;
    display: flex;
    margin-bottom: 50px;
  }

  .tab-switch-button {
    width: 180px;
    outline: 0;
    cursor: pointer;
    background-color: transparent;
    text-align: center;
    display: flex;
  }

  .tab-button-text-container {
    flex-direction: column;
    align-items: center;
  }

  .tab-button-text-container p {
    width: 160px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-bottom: 2px solid transparent;
    color: #5F6368;
  }

  .tab-switch-button span {
    cursor: pointer;
    font-size: 16px;
    display: none;
  }

  .tab-switch-button-border {
    width: 85%;
    height: 3px;
    background-color: transparent;
    margin: auto;
  }

  .tab-button-text-container:hover p {
    color: #fff;
  }

  .tab-switch-button-selected:hover span {
    display: block;
  }

  .tab-switch-button-selected .tab-switch-button-border {
    background-color: #eee;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }

  .tab-switch-button-selected p {
    color: #fff;
  }

  .osv-tab iframe {
    width: 100%;
    min-height: 1000px;
    border: none;
  }

  #vuln-tab {
    display: block;
  }

  .expand-icon {
    cursor: pointer;
  }

  .icon-td {
    width: 10px !important;
  }

  #filter-section {
    display: flex;
    width: 60%;
  }

  .filter-container {
    margin-right: 20px;
    max-width: 600px;
  }

  .filter {
    margin-top: 10px;
    max-width: 600px;
    min-width: 250px;
    background-color: transparent;
    border-radius: 10px;
    overflow: hidden;
    color: #fff;
    border: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
  }

  #layer-filter {
    width: 400px !important;
  }

  .filter-selected {
    white-space: nowrap;
    overflow: hidden;
  }

  .filter-option-container {
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;
    background-color: #292929;
    min-width: 200px;
    max-width: 1400px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    display: none;
  }

  .filter-option {
    border-bottom: 1px dotted #ddd;
    padding: 15px 20px;
    white-space: nowrap;
    cursor: pointer;
  }

  #layer-filter-option-container {
    width: 1400px;
  }

  .layer-filter-option {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
  }

  .filter-option:hover {
    background-color: black;
  }

  .filter-icon i {
    position: relative;
    top: 25%;
  }

  #summary-section {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  #severity-section {
    overflow: hidden;
  }

  .severity-long {
    text-align: center;
    min-width: 100px;
    overflow: hidden;
    white-space: nowrap;
  }

  .severity-long p {
    font-size: 10pt;
    padding: 5px 5px;
    border-radius: 5px;
    margin-right: 3px;
  }

  .critical {
    background-color: #ad0300;
  }

  .high {
    background-color: #ffa500;
  }

  .medium {
    background-color: #ffd700;
    color: #292929;
  }

  .low {
    background-color: #53aa33;
    color: #292929;
  }

  .unknown {
    background-color: #80868b;
  }

  .severity-count-summary {
    display: flex;
  }

  .severity-short {
    width: 40px;
  }

  .severity-short p {
    border-radius: 1px;
    text-align: center;
  }

   
  .search-box {
    display: inline-block;
    position: relative;
    width: 100%;
    border: 1px solid #fff;
    background-color: transparent;
    border-radius: 10px;
    margin-top: 30px;
  }

  .search-box input[type="text"] {
    padding: 10px 10px 10px 35px;
    border: none;
    background-color: transparent;
    width: 90%;
    margin-left: 10px;
    color: #fff;
    line-height: 2;
    font-size: 12pt;
  }

  .search-box input[type="text"]:focus {
    outline: none;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
  }

  .package-detail-title {
    color: #9AA0A6;
  }

  .layer-command-container {
    display: flex;
  }

  .inner-table {
    width: 100%;
    border: 0.5px solid rgba(255, 255, 255, 0.12);
    border-spacing: 0px;
    border-radius: 5px;
  }

  .inner-table th {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .inner-table td {
    border-bottom: 0.5px solid rgba(255, 255, 255, 0.12);
  }

  .expand-icon i.rotated {
    transform: rotate(90deg);
  }

  .tooltip {
    position: relative;
    display: inline-block;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-underline-offset: 3px;
  }

  .tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 5px;
    white-space: nowrap;
    width: fit-content;
    text-align: left;

     
    position: absolute;
    z-index: 999;
    top: 100%;
    left: 50%;
    margin-left: -60px;
  }

  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

  .inner-table .tooltip .tooltiptext {
    min-width: 300px;
    white-space: normal;
  }

  .flex-box {
    display: flex;
  }
</style>

</head>

<body>
  <script>
  function showPackageDetails(detailsId) {
    var detailsElement = document.getElementById("table-tr-" + detailsId + "-details");
    var rowElement = document.getElementById("table-tr-" + detailsId);
    const rowCells = rowElement.querySelectorAll('td');
    const icon = document.querySelector(`#table-tr-${detailsId} .material-icons`); 
    if (detailsElement.style.display !== "block") {
      detailsElement.style.display = "block";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid transparent";
      });
      icon.style.transform = 'rotate(90deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    } else {
      detailsElement.style.display = "none";
      rowCells.forEach(cell => {
        cell.style.borderBottom = "1px solid rgba(255, 255, 255, 0.12)";
      });
      icon.style.transform = 'rotate(0deg)'; 
      icon.style.transition = 'transform 0.2s ease'; 
    }
  }

  function openVulnInNewTab(inputString) {
    const osvURL = `https://osv.dev/${inputString}`;
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    const existingTab = document.getElementById(inputString);
    if (existingTab) {
      openTab(inputString);
      return;
    }

    
    const newTab = document.createElement("div");
    newTab.id = inputString; 
    newTab.className = 'tab osv-tab'; 

    
    const iframe = document.createElement('iframe');
    iframe.src = osvURL;

    
    const newTabButton = document.createElement('div');
    newTabButton.id = inputString + '-button';
    newTabButton.className = "tab-switch-button";
    newTabButton.onclick = function () { openTab(inputString); };

    
    const newTabTextContainer = document.createElement('div');
    newTabTextContainer.className = 'tab-button-text-container';
    const newTabText = document.createElement('p');
    newTabText.textContent = inputString;
    newTabTextContainer.appendChild(newTabText);

    const newTabButtonBorder = document.createElement('div');
    newTabButtonBorder.className = 'tab-switch-button-border';
    newTabTextContainer.appendChild(newTabButtonBorder);

    newTabButton.appendChild(newTabTextContainer);

    const closeIcon = document.createElement('span');
    closeIcon.className = "material-icons";
    closeIcon.textContent = 'close';
    
    closeIcon.onclick = function (event) {
      event.stopPropagation(); 
      closeVulnTab(inputString);
    };

    newTabButton.appendChild(closeIcon);

    
    newTab.appendChild(iframe);
    
    tabs.appendChild(newTab);
    tabSwitches.appendChild(newTabButton);

    openTab(newTab.id)
  }

  function closeVulnTab(inputString) {
    const tabToRemove = document.getElementById(inputString);
    const buttonToRemove = document.getElementById(inputString + '-button');
    const tabs = document.getElementById("tabs");
    const tabSwitches = document.getElementById("tab-switch");

    if (tabToRemove && buttonToRemove) {
      const nextTabButton = buttonToRemove.nextElementSibling || buttonToRemove.previousElementSibling;

      tabs.removeChild(tabToRemove);
      tabSwitches.removeChild(buttonToRemove);

      if (nextTabButton) {
        const nextTabId = nextTabButton.id.replace('-button', '');
        openTab(nextTabId);
      }
    }
  }

  function openTab(activeTabId) {
    const tabs = document.getElementsByClassName('tab');
    const tabButtons = document.getElementsByClassName('tab-switch-button');
    for (let i = 0; i < tabs.length; i++) {
      if (tabs[i].id === activeTabId) {
        tabs[i].style.display = 'block'; 
        tabButtons[i].classList.add('tab-switch-button-selected');
      } else {
        tabs[i].style.display = 'none'; 
        tabButtons[i].classList.remove('tab-switch-button-selected');
      }
    }
  }

  function hideAllFilterOptions() {
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      containers[i].style.display = 'none';
    }
  }

  function toggleFilter(input) {
    targetID = input + "-filter-option-container"
    var optionContainer = document.getElementById(targetID);
    const containers = document.getElementsByClassName('filter-option-container');
    for (let i = 0; i < containers.length; i++) {
      if (containers[i].id === targetID) {
        if (optionContainer.style.display !== "block") {
          optionContainer.style.display = "block";
        } else {
          optionContainer.style.display = "none";
        }
      } else {
        console.log('hide others')
        containers[i].style.display = 'none';
      }

    }

  }

  function showAndHideParentSections() {
    const ecosystemContainers = document.querySelectorAll('.ecosystem-container');

    ecosystemContainers.forEach(ecosystemContainer => {
      const sourceContainers = ecosystemContainer.querySelectorAll('.source-container');
      let ecosystemHasVisibleSources = false;

      sourceContainers.forEach(sourceContainer => {
        const packageRows = sourceContainer.querySelectorAll('.package-tr');
        let sourceHasVisibleRows = false;

        packageRows.forEach(packageRow => {
          packageDetails = document.getElementById(packageRow.id + '-details');
          const vulnRows = packageDetails.querySelectorAll('.vuln-tr');
          let packageHasVisibleRows = false;
          vulnRows.forEach(vulnRow => {
            if (window.getComputedStyle(vulnRow).display !== 'none') {
              packageHasVisibleRows = true;
              return;
            }
          })
          if (packageHasVisibleRows) {
            sourceHasVisibleRows = true;
            packageRow.style.display = 'table-row';
            return;
          } else {
            packageRow.style.display = 'none';
            packageDetails.style.display = 'none';
            const icon = document.querySelector(`#${packageRow.id} .material-icons`);
            icon.style.transform = 'rotate(0deg)'; 
          }
        });

        if (!sourceHasVisibleRows) {
          sourceContainer.style.display = 'none';
        } else {
          ecosystemHasVisibleSources = true;
          sourceContainer.style.display = 'block';
          return;
        }
      });

      if (!ecosystemHasVisibleSources) {
        ecosystemContainer.style.display = 'none';
      } else {
        ecosystemContainer.style.display = 'block';
      }
    });
  }

  function showAllVulns() {
    const vulnRows = document.getElementsByClassName('vuln-tr');
    for (let i = 0; i < vulnRows.length; i++) {
      if (vulnRows[i].classList.contains('uncalled-tr')) {
        vulnRows[i].style.display = 'none';
        continue
      }
      vulnRows[i].style.display = 'table-row';
    }

    showAndHideParentSections();
  }

  function applyFilters(selectedTypeFilterValue, selectedLayerFilterValue) {
    
    showAllVulns();
    applyTypeFilter(selectedTypeFilterValue);
    applyLayerFilter(selectedLayerFilterValue);
    showAndHideParentSections();
  }

  function applyTypeFilter(selectedValue) {
    selectedAll = selectedValue.has('all');
    selectedProject = selectedValue.has('project');
    selectedOS = selectedValue.has('os');
    selectedUncalled = selectedValue.has('uncalled');
    if (selectedAll) {
      selectedProject = true;
      selectedOS = true;
    }

    const ecosystemElements = document.querySelectorAll('.ecosystem-container');

    ecosystemElements.forEach(ecosystemElement => {
      const vulnElements = ecosystemElement.querySelectorAll('.vuln-tr');
      vulnElements.forEach(vuln => {
        if (vuln.classList.contains('uncalled-tr')) {
          if (selectedUncalled) {
            vuln.style.display = 'table-row';
          } else {
            vuln.style.display = 'none';
          }
        }
        if ((ecosystemElement.classList.contains('os-type') && !selectedOS) ||
          (ecosystemElement.classList.contains('project-type') && !selectedProject)) {
          vuln.style.display = 'none';
        }
      });
    });


  }

  function applyLayerFilter(selectedLayerID) {
    const tableRows = document.querySelectorAll('tr.has-layer-info');
    console.log('selected layerID: ' + selectedLayerID);
    tableRows.forEach(row => {
      const rowLayerID = row.getAttribute('data-layer');
      if (selectedLayerID !== 'all' && rowLayerID !== selectedLayerID) {
        const packageDetails = document.getElementById(row.id + '-details');
        const vulnElements = packageDetails.querySelectorAll('.vuln-tr');
        vulnElements.forEach(vuln => {
          console.log('set vuln display to none');
          vuln.style.display = 'none';
        });
      }
    });
  }

  function resetFilterText() {
    const layerSelected = document.getElementById('layer-filter-selected');
    const allLayerCheckedBox = document.getElementById('all-layer-checkbox');
    if (layerSelected) {
      layerSelected.textContent = "All layers (" + allLayerCheckedBox.getAttribute('data-layer-all-count') + ')';
    }

    const typeSelected = document.getElementById('type-filter-selected');
    const allTypeCheckedBox = document.getElementById('all-type-checkbox');
    const uncalledTypeCheckBox = document.getElementById('uncalled-type-checkbox');
    if (allTypeCheckedBox) {
      typeSelected.textContent = "All types (" + allTypeCheckedBox.getAttribute('data-type-all-count') + ')';
      allLayerCheckedBox.checked = true;
      uncalledTypeCheckBox.checked = false;
    } else {
      const projectTypeCheckedBox = document.getElementById('project-type-checkbox');
      projectTypeCheckedBox.checked = true;
      typeSelected.textContent = "All types (" + projectTypeCheckedBox.getAttribute('data-type-project-count') + ')';
      uncalledTypeCheckBox.checked = false;
    }
  }

  function resetSearchText() {
    const vulnSearchInput = document.getElementById('vuln-search');
    if (vulnSearchInput.value != '') {
      vulnSearchInput.value = '';
      showAllVulns();
    }
  }


  document.addEventListener('DOMContentLoaded', function () {
    showAndHideParentSections();
    let selectedTypeFilterValue = new Set();
    selectedTypeFilterValue.add('all');
    let selectedLayer = 'all';

    
    const typeFilterOptions = document.getElementById('type-filter-option-container');

    typeFilterOptions.addEventListener('change', function () {
      resetSearchText();
      const changedElement = event.target;
      const allTypesCheckbox = document.getElementById('all-type-checkbox');
      const projectCheckbox = document.getElementById('project-type-checkbox'); 
      const osCheckbox = document.getElementById('os-type-checkbox'); 
      const uncalledCheckbox = document.getElementById('uncalled-type-checkbox'); 
      selectedTypeFilterValue.clear();

      if (allTypesCheckbox != null) {
        if (changedElement == allTypesCheckbox) {
          osCheckbox.checked = allTypesCheckbox.checked;
          projectCheckbox.checked = allTypesCheckbox.checked;
          if (allTypesCheckbox.checked === true) {
            selectedTypeFilterValue.add('all');
          }
        }
        if (osCheckbox.checked === false || projectCheckbox.checked === false) {
          allTypesCheckbox.checked = false;
        }

        if (osCheckbox.checked) {
          selectedTypeFilterValue.add('os');
        }
      }

      if (projectCheckbox.checked) {
        selectedTypeFilterValue.add('project');
      }

      if (uncalledCheckbox.checked) {
        selectedTypeFilterValue.add('uncalled');
      }

      selectedDisplay = document.getElementById('type-filter-selected');
      if (allTypesCheckbox != null && allTypesCheckbox.checked) {
        const allTypesLabel = document.querySelector(`label[for="${allTypesCheckbox.id}"]`);
        selectedDisplay.textContent = allTypesLabel.textContent;
      } else {
        let typeArray = Array.from(selectedTypeFilterValue);
        selectedToString = typeArray.join(", ");
        selectedDisplay.textContent = selectedToString;
      }

      applyFilters(selectedTypeFilterValue, selectedLayer);
    });

    
    const layerFilterOptionsContainer = document.getElementById('layer-filter-option-container');

    if (layerFilterOptionsContainer) {
      layerFilterOptionsContainer.addEventListener('click', (event) => {
        const clickedOption = event.target.closest('.layer-filter-option');
        if (clickedOption) {
          resetSearchText();
          selectedLayer = clickedOption.getAttribute('value');
          selectedDisplay = document.getElementById('layer-filter-selected');
          layerCommand = clickedOption.querySelector('p:first-child');
          selectedDisplay.textContent = layerCommand.textContent;

          hideAllFilterOptions();
          applyFilters(selectedTypeFilterValue, selectedLayer);
        }
      });
    }


    
    const filterSection = document.getElementById('filter-section');

    document.addEventListener('click', (event) => {
      if (!filterSection.contains(event.target)) {
        hideAllFilterOptions();
      }
    });

    
    const vulnSearchInput = document.getElementById('vuln-search');
    vulnSearchInput.addEventListener('keyup', (event) => {
      resetFilterText();
      const searchTerm = vulnSearchInput.value.trim().toLowerCase();

      const vulnRows = document.querySelectorAll('[data-vuln-id]');

      if (searchTerm === "") {
        showAllVulns();
        return;
      }

      vulnRows.forEach(row => {
        const vulnID = row.getAttribute('data-vuln-id').toLowerCase();

        if (vulnID.includes(searchTerm)) {
          row.style.display = 'table-row';
        } else {
          row.style.display = 'none';
        }
      });
      showAndHideParentSections();
    });
  });

</script>

  <div class="container">
    <header>
      <img src="https://osv.dev/static/img/logo.png" alt="OSV-Scanner Logo" class="logo" />
      <div class="vl"></div>
      <h1>Open Source Vulnerabilities</h1>
    </header>

    <div id="tab-switch">
      <div id="summary-tab-button" class="tab-switch-button tab-switch-button-selected"
        onclick="openTab('summary-tab')">
        <div class="tab-button-text-container">
          <p>Scanning summary</p>
          <div class="tab-switch-button-border"></div>
        </div>
      </div>
    </div>


    <div id="tabs">
      <div id="summary-tab" class="tab">
        <div id="summary-section">
  <div id="filter-section">
    

    <div class="filter-container">
      <label for="type-filter">Vulnerability type<br></label>
      <div id="type-filter" class="filter" onclick="toggleFilter('type')">
        <p value="all" id="type-filter-selected" class="filter-selected">All types (2)</p>
        <div class="filter-icon">
          <i class="material-icons">keyboard_arrow_down</i>
        </div>
      </div>
      <div id="type-filter-option-container" class="filter-option-container">
        
        <div class="filter-option">
          <input type="checkbox" checked id="project-type-checkbox"
            data-type-project-count="2">
          <label for="project-type-checkbox"> Project Vulnerabilities (2)</label>
        </div>
        
        <div class="filter-option">
          <input type="checkbox" id="uncalled-type-checkbox">
          <label for="uncalled-type-checkbox">Uncalled/Unimportant (0)</label>
        </div>
      </div>
    </div>
  </div>


  <div id="severity-section">
    <label>Overall Severity</label>
    <div class="flex-box">
      <div id="critical-long" class="severity-long">
        <p class="critical">0 Critical</p>
      </div>
      <div id="high-long" class="severity-long">
        <p class="high">0 High</p>
      </div>
      <div id="medium-long" class="severity-long">
        <p class="medium">0 Medium</p>
      </div>
      <div id="low-long" class="severity-long">
        <p class="low">0 Low</p>
      </div>
      <div id="unknow-long" class="severity-long">
        <p class="unknown">2 Unknown</p>
      </div>
    </div>
  </div>


</div>


        <div class="search-box">
          <div class="search-icon">
            <i class="material-icons">search</i>
          </div>
          <input type="text" id="vuln-search" placeholder="Search vulnerability ID...">
        </div>

        <div id="vuln-tab" class="view-tab">
          
<div class="ecosystem-container project-type">
  <h2 class="ecosystem-heading">npm</h2>
  <div class="ecosystem-sources-container">
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/first/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-1">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('1')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-1-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-2" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
    <div class="source-container">
      <h3 class="source-heading">Source: :path/to/my/second/lockfile</h3>
      <table class="vuln-table">
  <tr>
    <th></th>
    <th>Package</th>
    <th>Installed version</th>
    <th>Fixed available</th>
    <th>Vulnerability Count</th>
  </tr>
  
  
  <tr class="table-tr package-tr has-layer-info"
    data-layer="" id="table-tr-3">
    <td class="icon-td">
      <div class="expand-icon" onclick="showPackageDetails('3')">
        <i class="material-icons">play_arrow</i>
      </div>
    </td>
    <td >mine1</td>
    <td >1.2.3</td>
    <td>
      
      
      <p class="fixable-tag no-fix">No fix available</p>
      
      
    </td>
    <td>
      
      <div class="severity-count-summary">
  <div id="critical-short" class="severity-short">
    <p class="critical">0</p>
  </div>
  <div id="high-short" class="severity-short">
    <p class="high">0</p>
  </div>
  <div id="medium-short" class="severity-short">
    <p class="medium">0</p>
  </div>
  <div id="low-short" class="severity-short">
    <p class="low">0</p>
  </div>
  <div id="unknown-short" class="severity-short">
    <p class="unknown">1</p>
  </div>
</div>

      
    </td>
  </tr>
  <tr>
    <td colspan="100%">
      <div id="table-tr-3-details" class="package-details">
        
        <table class="inner-table">
  <tr>
    <th>Vulnerability ID</th>
    <th>Aliases</th>
    <th>Fixed version</th>
    <th class="severity-cell">Severity</th>
    <th class="open-in-tab-cell"></th>
  </tr>
  
  
  <tr class='table-tr vuln-tr' id="table-tr-4" data-vuln-id="OSV-1">
    <td>
      
      OSV-1
      
    </td>
    <td>
      
    </td>

    <td>
      <p  class="fixable-tag no-fix" >
        No fix available</p>
    </td>
    <td class="severity-cell">
      <div id="unknown-short" class="severity-short">
        <p class="unknown">N/A</p>
      </div>
    </td>
    <td class="open-in-tab-cell">
      <p class="open-in-tab-tag" onclick="openVulnInNewTab('OSV-1')">Open in tab</p>
    </td>
  </tr>
  

  
</table>


    </td>
  </tr>
  
</table>

    </div>
    
  </div>
</div>


        </div>
      </div>
    </div>

  </div>
</body>

</html>

---
