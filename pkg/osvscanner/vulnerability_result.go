package osvscanner

import (
	"path/filepath"
	"slices"
	"sort"
	"strings"

	"github.com/google/osv-scalibr/extractor"
	"github.com/google/osv-scanner/v2/internal/grouper"
	"github.com/google/osv-scanner/v2/internal/imodels"
	"github.com/google/osv-scanner/v2/internal/imodels/results"
	"github.com/google/osv-scanner/v2/internal/output"
	"github.com/google/osv-scanner/v2/internal/sourceanalysis"
	"github.com/google/osv-scanner/v2/internal/spdx"
	"github.com/google/osv-scanner/v2/pkg/models"
	"github.com/google/osv-scanner/v2/pkg/reporter"
	"github.com/ossf/osv-schema/bindings/go/osvschema"
)

// buildVulnerabilityResults takes the responses from the OSV API and the deps.dev API
// and converts this into a VulnerabilityResults. As part is this, it groups
// vulnerability information by source location.
// TODO: This function is getting long, we should refactor it
func buildVulnerabilityResults(
	r reporter.Reporter,
	actions ScannerActions,
	scanResults *results.ScanResults,
) models.VulnerabilityResults {
	results := models.VulnerabilityResults{
		Results:       []models.PackageSource{},
		ImageMetadata: scanResults.ImageMetadata,
	}

	type packageVulnsGroup struct {
		pvs         []models.PackageVulns
		annotations []extractor.Annotation
	}

	groupedBySource := map[models.SourceInfo]*packageVulnsGroup{}
	for _, psr := range scanResults.PackageScanResults {
		p := psr.PackageInfo
		includePackage := actions.ShowAllPackages
		var pkg models.PackageVulns

		if p.Commit() != "" {
			pkg.Package.Commit = p.Commit()
			pkg.Package.Name = p.Name()
		}

		if p.Version() != "" && !p.Ecosystem().IsEmpty() {
			pkg.Package = models.PackageInfo{
				Name:          p.Name(),
				Version:       p.Version(),
				Ecosystem:     p.Ecosystem().String(),
				OSPackageName: p.OSPackageName(),
			}
		}

		if psr.LayerDetails != nil {
			pkg.Package.ImageOrigin = &models.ImageOriginDetails{
				Index: psr.LayerDetails.Index,
			}
		}
		pkg.DepGroups = p.DepGroups()
		configToUse := scanResults.ConfigManager.Get(r, p.Location())

		if len(psr.Vulnerabilities) > 0 {
			if !configToUse.ShouldIgnorePackageVulnerabilities(p) {
				includePackage = true
				for _, vuln := range psr.Vulnerabilities {
					pkg.Vulnerabilities = append(pkg.Vulnerabilities, *vuln)
				}
				pkg.Groups = grouper.Group(grouper.ConvertVulnerabilityToIDAliases(pkg.Vulnerabilities))
				for i, group := range pkg.Groups {
					pkg.Groups[i].MaxSeverity = output.MaxSeverity(group, pkg)
				}
			}
		}

		// For Debian-based ecosystems, mark unimportant vulnerabilities within the package.
		// Debian ecosystems may be listed with a version number, such as "Debian:10".
		if strings.HasPrefix(pkg.Package.Ecosystem, string(osvschema.EcosystemDebian)) ||
			strings.HasPrefix(pkg.Package.Ecosystem, string(osvschema.EcosystemUbuntu)) {
			setUnimportant(&pkg)
		}

		if actions.ScanLicensesSummary || len(actions.ScanLicensesAllowlist) > 0 {
			if override, entry := configToUse.ShouldOverridePackageLicense(p); override {
				if entry.License.Ignore {
					r.Infof("ignoring license for package %s/%s/%s\n", pkg.Package.Ecosystem, pkg.Package.Name, pkg.Package.Version)
					psr.Licenses = []models.License{}
				} else {
					overrideLicenses := make([]models.License, len(entry.License.Override))
					for j, license := range entry.License.Override {
						overrideLicenses[j] = models.License(license)
					}
					r.Infof("overriding license for package %s/%s/%s with %s\n", pkg.Package.Ecosystem, pkg.Package.Name, pkg.Package.Version, strings.Join(entry.License.Override, ","))
					psr.Licenses = overrideLicenses
				}
			}
			if len(actions.ScanLicensesAllowlist) > 0 {
				pkg.Licenses = psr.Licenses
				for _, license := range pkg.Licenses {
					satisfies, err := spdx.Satisfies(license, actions.ScanLicensesAllowlist)

					if err != nil {
						r.Errorf("license %s for package %s/%s/%s is invalid: %s\n", license, pkg.Package.Ecosystem, pkg.Package.Name, pkg.Package.Version, err)
					}

					if !satisfies {
						pkg.LicenseViolations = append(pkg.LicenseViolations, license)
					}
				}
				if len(pkg.LicenseViolations) > 0 {
					includePackage = true
				}
			}

			if actions.ScanLicensesSummary {
				pkg.Licenses = psr.Licenses
			}
		}
		if includePackage {
			var sourceType string
			switch p.SourceType() {
			case imodels.SourceTypeOSPackage:
				sourceType = "os"
			case imodels.SourceTypeArtifact:
				sourceType = "artifact"
			case imodels.SourceTypeProjectPackage:
				sourceType = "lockfile"
			case imodels.SourceTypeSBOM:
				sourceType = "sbom"
			case imodels.SourceTypeGit:
				sourceType = "git"
			case imodels.SourceTypeUnknown:
				sourceType = "unknown"
			default:
				sourceType = "unknown"
			}
			source := models.SourceInfo{
				Path: filepath.ToSlash(p.Location()),
				Type: sourceType,
			}

			if groupedBySource[source] == nil {
				groupedBySource[source] = &packageVulnsGroup{}
			}

			groupedBySource[source].pvs = append(groupedBySource[source].pvs, pkg)
			// Overwrite annotations as it should be the same for the same package.
			groupedBySource[source].annotations = p.Annotations
		}
	}

	// TODO(v2): Move source analysis out of here.
	for source, packages := range groupedBySource {
		sourceanalysis.Run(r, source, packages.pvs, actions.CallAnalysisStates)
		results.Results = append(results.Results, models.PackageSource{
			Source:                  source,
			ExperimentalAnnotations: packages.annotations,
			Packages:                packages.pvs,
		})
	}

	sort.Slice(results.Results, func(i, j int) bool {
		if results.Results[i].Source.Path == results.Results[j].Source.Path {
			return results.Results[i].Source.Type < results.Results[j].Source.Type
		}

		return results.Results[i].Source.Path < results.Results[j].Source.Path
	})

	if len(actions.ScanLicensesAllowlist) > 0 || actions.ScanLicensesSummary {
		results.ExperimentalAnalysisConfig.Licenses.Summary = actions.ScanLicensesSummary
		allowlist := make([]models.License, len(actions.ScanLicensesAllowlist))
		for i, l := range actions.ScanLicensesAllowlist {
			allowlist[i] = models.License(l)
		}
		results.ExperimentalAnalysisConfig.Licenses.Allowlist = allowlist
	}

	return results
}

// setUnimportant marks vulnerabilities in a PackageVulns as unimportant
// within their respective groups' experimental analysis.
func setUnimportant(pkg *models.PackageVulns) {
	for _, vuln := range pkg.Vulnerabilities {
		if !isUnimportant(vuln.Affected) {
			continue
		}
		for i, group := range pkg.Groups {
			if slices.Contains(group.IDs, vuln.ID) {
				if group.ExperimentalAnalysis == nil {
					pkg.Groups[i].ExperimentalAnalysis = make(map[string]models.AnalysisInfo)
				}
				// Set unimportant vulns as uncalled
				pkg.Groups[i].ExperimentalAnalysis[vuln.ID] = models.AnalysisInfo{
					Unimportant: true,
					// TODO(gongh@): Currently, call analysis is not supported for Linux distribution vulnerabilities.
					// Except explicitly set Called as true to not be counted as uncalled vulnerabilities.
					// Update this behavior when call analysis for Linux distributions is implemented.
					Called: true,
				}

				break
			}
		}
	}
}

// isUnimportant checks if a Debian-based vulnerability is tagged as unimportant
// Debian: https://security-team.debian.org/security_tracker.html#severity-levels
// Ubuntu: https://ubuntu.com/security/cves/about#priority
func isUnimportant(affectedPackages []models.Affected) bool {
	for _, affected := range affectedPackages {
		if affected.EcosystemSpecific["urgency"] == "unimportant" {
			return true
		}
		if affected.EcosystemSpecific["ubuntu_priority"] == "negligible" {
			return true
		}
	}

	return false
}
