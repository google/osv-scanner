package models_test

import (
	"testing"
	"time"

	"github.com/google/osv-scanner/internal/testutility"
	"github.com/google/osv-scanner/pkg/models"
	"gopkg.in/yaml.v3"
)

func TestAffected_MarshalJSON(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name string
		vuln models.Vulnerability
	}{
		{
			name: "with package",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
				Affected: []models.Affected{
					{
						Package:  models.Package{Ecosystem: models.EcosystemPyPI, Name: "requests"},
						Versions: []string{"1.0.0"},
					},
				},
			},
		},
		{
			name: "without package",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
				Affected: []models.Affected{
					{
						Package:  models.Package{Ecosystem: models.EcosystemPyPI, Name: "requests"},
						Versions: []string{"1.0.0"},
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			testutility.NewSnapshot().MatchJSON(t, tt.vuln)
		})
	}
}

func TestAffected_MarshalYAML(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name string
		vuln models.Vulnerability
	}{
		{
			name: "with package",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
				Affected: []models.Affected{
					{
						Package:  models.Package{Ecosystem: models.EcosystemPyPI, Name: "requests"},
						Versions: []string{"1.0.0"},
					},
				},
			},
		},
		{
			name: "without package",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
				Affected: []models.Affected{
					{
						Package:  models.Package{Ecosystem: models.EcosystemPyPI, Name: "requests"},
						Versions: []string{"1.0.0"},
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := yaml.Marshal(tt.vuln)
			if err != nil {
				t.Fatalf("Marshal() = %v; want no error", err)
			}
			testutility.NewSnapshot().MatchText(t, string(got))
		})
	}
}

func TestVulnerability_MarshalJSON_WithTimes(t *testing.T) {
	t.Parallel()

	losAngeles, err := time.LoadLocation("America/Los_Angeles")
	if err != nil {
		panic(err)
	}

	tests := []struct {
		name string
		vuln models.Vulnerability
		want string
	}{
		{
			name: "empty",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
			},
			want: `{"modified":"0001-01-01T00:00:00Z","id":"TEST-0000"}`,
		},
		{
			name: "no withdraw",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, time.UTC),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, time.UTC),
			},
			want: `{"modified":"2023-12-01T12:30:30Z","published":"2021-06-30T01:00:00Z","id":"TEST-0000"}`,
		},
		{
			name: "all UTC",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, time.UTC),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, time.UTC),
				Withdrawn: time.Date(2022, 1, 15, 23, 59, 59, 0, time.UTC),
			},
			want: `{"modified":"2023-12-01T12:30:30Z","published":"2021-06-30T01:00:00Z","withdrawn":"2022-01-15T23:59:59Z","id":"TEST-0000"}`,
		},
		{
			name: "all Los Angeles",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, losAngeles),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, losAngeles),
				Withdrawn: time.Date(2022, 1, 15, 23, 59, 59, 0, losAngeles),
			},
			want: `{"modified":"2023-12-01T20:30:30Z","published":"2021-06-30T08:00:00Z","withdrawn":"2022-01-16T07:59:59Z","id":"TEST-0000"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			testutility.NewSnapshot().MatchJSON(t, tt.vuln)
		})
	}
}

func TestVulnerability_MarshalYAML_WithTimes(t *testing.T) {
	t.Parallel()

	losAngeles, err := time.LoadLocation("America/Los_Angeles")
	if err != nil {
		panic(err)
	}

	tests := []struct {
		name string
		vuln models.Vulnerability
	}{
		{
			name: "empty",
			vuln: models.Vulnerability{
				ID: "TEST-0000",
			},
		},
		{
			name: "no withdraw",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, time.UTC),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, time.UTC),
			},
		},
		{
			name: "all UTC",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, time.UTC),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, time.UTC),
				Withdrawn: time.Date(2022, 1, 15, 23, 59, 59, 0, time.UTC),
			},
		},
		{
			name: "all Los Angeles",
			vuln: models.Vulnerability{
				ID:        "TEST-0000",
				Modified:  time.Date(2023, 12, 1, 12, 30, 30, 0, losAngeles),
				Published: time.Date(2021, 6, 30, 1, 0, 0, 0, losAngeles),
				Withdrawn: time.Date(2022, 1, 15, 23, 59, 59, 0, losAngeles),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := yaml.Marshal(tt.vuln)
			if err != nil {
				t.Fatalf("Marshal() = %v; want no error", err)
			}
			testutility.NewSnapshot().MatchText(t, string(got))
		})
	}
}
